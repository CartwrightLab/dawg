/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef yyconst struct yy_trans_info *yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 20
#define YY_END_OF_BUFFER 21
struct yy_trans_info
	{
	short yy_verify;
	short yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[4013] =
    {
 {   0,   0 }, {   0,3885 }, {   0,   0 }, {   0,3883 }, {   1, 520 },
 {   2, 520 }, {   3, 520 }, {   4, 520 }, {   5, 520 }, {   6, 520 },
 {   7, 520 }, {   8, 520 }, {   9, 522 }, {  10, 524 }, {  11, 522 },
 {  12, 522 }, {  13, 522 }, {  14, 520 }, {  15, 520 }, {  16, 520 },
 {  17, 520 }, {  18, 520 }, {  19, 520 }, {  20, 520 }, {  21, 520 },
 {  22, 520 }, {  23, 520 }, {  24, 520 }, {  25, 520 }, {  26, 520 },
 {  27, 520 }, {  28, 520 }, {  29, 520 }, {  30, 520 }, {  31, 520 },
 {  32, 522 }, {  33, 520 }, {  34, 556 }, {  35, 686 }, {  36, 520 },
 {  37, 520 }, {  38, 520 }, {  39, 520 }, {  40, 526 }, {  41, 520 },
 {  42, 520 }, {  43, 816 }, {  44, 522 }, {  45, 816 }, {  46, 528 },

 {  47, 827 }, {  48, 829 }, {  49, 829 }, {  50, 829 }, {  51, 829 },
 {  52, 829 }, {  53, 829 }, {  54, 829 }, {  55, 829 }, {  56, 829 },
 {  57, 829 }, {  58, 520 }, {  59, 831 }, {  60, 520 }, {  61, 528 },
 {  62, 520 }, {  63, 520 }, {  64, 520 }, {  65, 839 }, {  66, 839 },
 {  67, 839 }, {  68, 839 }, {  69, 839 }, {  70, 932 }, {  71, 839 },
 {  72, 839 }, {  73, 839 }, {  74, 839 }, {  75, 839 }, {  76, 839 },
 {  77, 839 }, {  78, 839 }, {  79, 839 }, {  80, 839 }, {  81, 839 },
 {  82, 839 }, {  83, 839 }, {  84,1024 }, {  85, 839 }, {  86, 839 },
 {  87, 839 }, {  88, 839 }, {  89, 839 }, {  90, 839 }, {  91, 520 },
 {  92, 520 }, {  93, 520 }, {  94, 520 }, {  95, 520 }, {  96, 520 },

 {  97, 839 }, {  98, 839 }, {  99, 839 }, { 100, 839 }, { 101, 839 },
 { 102, 932 }, { 103, 839 }, { 104, 839 }, { 105, 839 }, { 106, 839 },
 { 107, 839 }, { 108, 839 }, { 109, 839 }, { 110, 839 }, { 111, 839 },
 { 112, 839 }, { 113, 839 }, { 114, 839 }, { 115, 839 }, { 116,1024 },
 { 117, 839 }, { 118, 839 }, { 119, 839 }, { 120, 839 }, { 121, 839 },
 { 122, 839 }, { 123, 528 }, { 124, 520 }, { 125, 528 }, { 126, 520 },
 { 127, 520 }, { 128, 520 }, {   0,   0 }, {   0,3753 }, {   1, 390 },
 {   2, 390 }, {   3, 390 }, {   4, 390 }, {   5, 390 }, {   6, 390 },
 {   7, 390 }, {   8, 390 }, {   9, 392 }, {  10, 394 }, {  11, 392 },
 {  12, 392 }, {  13, 392 }, {  14, 390 }, {  15, 390 }, {  16, 390 },

 {  17, 390 }, {  18, 390 }, {  19, 390 }, {  20, 390 }, {  21, 390 },
 {  22, 390 }, {  23, 390 }, {  24, 390 }, {  25, 390 }, {  26, 390 },
 {  27, 390 }, {  28, 390 }, {  29, 390 }, {  30, 390 }, {  31, 390 },
 {  32, 392 }, {  33, 390 }, {  34, 426 }, {  35, 556 }, {  36, 390 },
 {  37, 390 }, {  38, 390 }, {  39, 390 }, {  40, 396 }, {  41, 390 },
 {  42, 390 }, {  43, 686 }, {  44, 392 }, {  45, 686 }, {  46, 398 },
 {  47, 697 }, {  48, 699 }, {  49, 699 }, {  50, 699 }, {  51, 699 },
 {  52, 699 }, {  53, 699 }, {  54, 699 }, {  55, 699 }, {  56, 699 },
 {  57, 699 }, {  58, 390 }, {  59, 701 }, {  60, 390 }, {  61, 398 },
 {  62, 390 }, {  63, 390 }, {  64, 390 }, {  65, 709 }, {  66, 709 },

 {  67, 709 }, {  68, 709 }, {  69, 709 }, {  70, 802 }, {  71, 709 },
 {  72, 709 }, {  73, 709 }, {  74, 709 }, {  75, 709 }, {  76, 709 },
 {  77, 709 }, {  78, 709 }, {  79, 709 }, {  80, 709 }, {  81, 709 },
 {  82, 709 }, {  83, 709 }, {  84, 894 }, {  85, 709 }, {  86, 709 },
 {  87, 709 }, {  88, 709 }, {  89, 709 }, {  90, 709 }, {  91, 390 },
 {  92, 390 }, {  93, 390 }, {  94, 390 }, {  95, 390 }, {  96, 390 },
 {  97, 709 }, {  98, 709 }, {  99, 709 }, { 100, 709 }, { 101, 709 },
 { 102, 802 }, { 103, 709 }, { 104, 709 }, { 105, 709 }, { 106, 709 },
 { 107, 709 }, { 108, 709 }, { 109, 709 }, { 110, 709 }, { 111, 709 },
 { 112, 709 }, { 113, 709 }, { 114, 709 }, { 115, 709 }, { 116, 894 },

 { 117, 709 }, { 118, 709 }, { 119, 709 }, { 120, 709 }, { 121, 709 },
 { 122, 709 }, { 123, 398 }, { 124, 390 }, { 125, 398 }, { 126, 390 },
 { 127, 390 }, { 128, 390 }, {   0,   0 }, {   0,3623 }, {   1, 888 },
 {   2, 888 }, {   3, 888 }, {   4, 888 }, {   5, 888 }, {   6, 888 },
 {   7, 888 }, {   8, 888 }, {   9, 262 }, {  10, 264 }, {  11, 262 },
 {  12, 262 }, {  13, 262 }, {  14, 888 }, {  15, 888 }, {  16, 888 },
 {  17, 888 }, {  18, 888 }, {  19, 888 }, {  20, 888 }, {  21, 888 },
 {  22, 888 }, {  23, 888 }, {  24, 888 }, {  25, 888 }, {  26, 888 },
 {  27, 888 }, {  28, 888 }, {  29, 888 }, {  30, 888 }, {  31, 888 },
 {  32, 262 }, {  33, 888 }, {  34,1018 }, {  35, 888 }, {  36, 888 },

 {  37, 888 }, {  38, 888 }, {  39, 260 }, {  40, 573 }, {  41, 573 },
 {  42, 888 }, {  43, 888 }, {  44, 262 }, {  45, 888 }, {  46, 888 },
 {  47, 888 }, {  48, 888 }, {  49, 888 }, {  50, 888 }, {  51, 888 },
 {  52, 888 }, {  53, 888 }, {  54, 888 }, {  55, 888 }, {  56, 888 },
 {  57, 888 }, {  58,1148 }, {  59, 575 }, {  60, 888 }, {  61, 888 },
 {  62, 888 }, {  63, 888 }, {  64, 888 }, {  65, 888 }, {  66, 888 },
 {  67, 888 }, {  68, 888 }, {  69, 888 }, {  70, 888 }, {  71, 888 },
 {  72, 888 }, {  73, 888 }, {  74, 888 }, {  75, 888 }, {  76, 888 },
 {  77, 888 }, {  78, 888 }, {  79, 888 }, {  80, 888 }, {  81, 888 },
 {  82, 888 }, {  83, 888 }, {  84, 888 }, {  85, 888 }, {  86, 888 },

 {  87, 888 }, {  88, 888 }, {  89, 888 }, {  90, 888 }, {  91,1207 },
 {  92, 888 }, {  93, 260 }, {  94, 888 }, {  95, 888 }, {  96, 888 },
 {  97, 888 }, {  98, 888 }, {  99, 888 }, { 100, 888 }, { 101, 888 },
 { 102, 888 }, { 103, 888 }, { 104, 888 }, { 105, 888 }, { 106, 888 },
 { 107, 888 }, { 108, 888 }, { 109, 888 }, { 110, 888 }, { 111, 888 },
 { 112, 888 }, { 113, 888 }, { 114, 888 }, { 115, 888 }, { 116, 888 },
 { 117, 888 }, { 118, 888 }, { 119, 888 }, { 120, 888 }, { 121, 888 },
 { 122, 888 }, { 123, 888 }, { 124, 888 }, { 125, 888 }, { 126, 888 },
 { 127, 888 }, { 128, 888 }, {   0,   0 }, {   0,3493 }, {   1, 758 },
 {   2, 758 }, {   3, 758 }, {   4, 758 }, {   5, 758 }, {   6, 758 },

 {   7, 758 }, {   8, 758 }, {   9, 132 }, {  10, 134 }, {  11, 132 },
 {  12, 132 }, {  13, 132 }, {  14, 758 }, {  15, 758 }, {  16, 758 },
 {  17, 758 }, {  18, 758 }, {  19, 758 }, {  20, 758 }, {  21, 758 },
 {  22, 758 }, {  23, 758 }, {  24, 758 }, {  25, 758 }, {  26, 758 },
 {  27, 758 }, {  28, 758 }, {  29, 758 }, {  30, 758 }, {  31, 758 },
 {  32, 132 }, {  33, 758 }, {  34, 888 }, {  35, 758 }, {  36, 758 },
 {  37, 758 }, {  38, 758 }, {  39, 130 }, {  40, 443 }, {  41, 443 },
 {  42, 758 }, {  43, 758 }, {  44, 132 }, {  45, 758 }, {  46, 758 },
 {  47, 758 }, {  48, 758 }, {  49, 758 }, {  50, 758 }, {  51, 758 },
 {  52, 758 }, {  53, 758 }, {  54, 758 }, {  55, 758 }, {  56, 758 },

 {  57, 758 }, {  58,1018 }, {  59, 445 }, {  60, 758 }, {  61, 758 },
 {  62, 758 }, {  63, 758 }, {  64, 758 }, {  65, 758 }, {  66, 758 },
 {  67, 758 }, {  68, 758 }, {  69, 758 }, {  70, 758 }, {  71, 758 },
 {  72, 758 }, {  73, 758 }, {  74, 758 }, {  75, 758 }, {  76, 758 },
 {  77, 758 }, {  78, 758 }, {  79, 758 }, {  80, 758 }, {  81, 758 },
 {  82, 758 }, {  83, 758 }, {  84, 758 }, {  85, 758 }, {  86, 758 },
 {  87, 758 }, {  88, 758 }, {  89, 758 }, {  90, 758 }, {  91,1077 },
 {  92, 758 }, {  93, 130 }, {  94, 758 }, {  95, 758 }, {  96, 758 },
 {  97, 758 }, {  98, 758 }, {  99, 758 }, { 100, 758 }, { 101, 758 },
 { 102, 758 }, { 103, 758 }, { 104, 758 }, { 105, 758 }, { 106, 758 },

 { 107, 758 }, { 108, 758 }, { 109, 758 }, { 110, 758 }, { 111, 758 },
 { 112, 758 }, { 113, 758 }, { 114, 758 }, { 115, 758 }, { 116, 758 },
 { 117, 758 }, { 118, 758 }, { 119, 758 }, { 120, 758 }, { 121, 758 },
 { 122, 758 }, { 123, 758 }, { 124, 758 }, { 125, 758 }, { 126, 758 },
 { 127, 758 }, { 128, 758 }, {   0,  19 }, {   0,3363 }, {   0,  17 },
 {   0,3361 }, {   0,  18 }, {   0,3359 }, {   0,   9 }, {   0,3357 },
 {   0,   6 }, {   0,3355 }, {   0,   0 }, {   0,   0 }, {   9,1075 },
 {   0,   0 }, {  11,1075 }, {  12,1075 }, {  13,1075 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,1075 }, {   0,  19 }, {   0,3327 },
 {   1,1075 }, {   2,1075 }, {   3,1075 }, {   4,1075 }, {   5,1075 },
 {   6,1075 }, {   7,1075 }, {   8,1075 }, {   9,1075 }, {  44,1075 },
 {  11,1075 }, {  12,1075 }, {  13,1075 }, {  14,1075 }, {  15,1075 },
 {  16,1075 }, {  17,1075 }, {  18,1075 }, {  19,1075 }, {  20,1075 },
 {  21,1075 }, {  22,1075 }, {  23,1075 }, {  24,1075 }, {  25,1075 },
 {  26,1075 }, {  27,1075 }, {  28,1075 }, {  29,1075 }, {  30,1075 },
 {  31,1075 }, {  32,1075 }, {  33,1075 }, {  34, 281 }, {  35,1075 },
 {  36,1075 }, {  37,1075 }, {  38,1075 }, {  39,1075 }, {  40,1075 },

 {  41,1075 }, {  42,1075 }, {  43,1075 }, {  44,1075 }, {  45,1075 },
 {  46,1075 }, {  47,1075 }, {  48,1075 }, {  49,1075 }, {  50,1075 },
 {  51,1075 }, {  52,1075 }, {  53,1075 }, {  54,1075 }, {  55,1075 },
 {  56,1075 }, {  57,1075 }, {  58,1075 }, {  59,1075 }, {  60,1075 },
 {  61,1075 }, {  62,1075 }, {  63,1075 }, {  64,1075 }, {  65,1075 },
 {  66,1075 }, {  67,1075 }, {  68,1075 }, {  69,1075 }, {  70,1075 },
 {  71,1075 }, {  72,1075 }, {  73,1075 }, {  74,1075 }, {  75,1075 },
 {  76,1075 }, {  77,1075 }, {  78,1075 }, {  79,1075 }, {  80,1075 },
 {  81,1075 }, {  82,1075 }, {  83,1075 }, {  84,1075 }, {  85,1075 },
 {  86,1075 }, {  87,1075 }, {  88,1075 }, {  89,1075 }, {  90,1075 },

 {  91,1075 }, {  92,1075 }, {  93,1075 }, {  94,1075 }, {  95,1075 },
 {  96,1075 }, {  97,1075 }, {  98,1075 }, {  99,1075 }, { 100,1075 },
 { 101,1075 }, { 102,1075 }, { 103,1075 }, { 104,1075 }, { 105,1075 },
 { 106,1075 }, { 107,1075 }, { 108,1075 }, { 109,1075 }, { 110,1075 },
 { 111,1075 }, { 112,1075 }, { 113,1075 }, { 114,1075 }, { 115,1075 },
 { 116,1075 }, { 117,1075 }, { 118,1075 }, { 119,1075 }, { 120,1075 },
 { 121,1075 }, { 122,1075 }, { 123,1075 }, { 124,1075 }, { 125,1075 },
 { 126,1075 }, { 127,1075 }, { 128,1075 }, {   0,   7 }, {   0,3197 },
 {   1,1075 }, {   2,1075 }, {   3,1075 }, {   4,1075 }, {   5,1075 },
 {   6,1075 }, {   7,1075 }, {   8,1075 }, {   9,1075 }, {   0,   0 },

 {  11,1075 }, {  12,1075 }, {  13,1075 }, {  14,1075 }, {  15,1075 },
 {  16,1075 }, {  17,1075 }, {  18,1075 }, {  19,1075 }, {  20,1075 },
 {  21,1075 }, {  22,1075 }, {  23,1075 }, {  24,1075 }, {  25,1075 },
 {  26,1075 }, {  27,1075 }, {  28,1075 }, {  29,1075 }, {  30,1075 },
 {  31,1075 }, {  32,1075 }, {  33,1075 }, {  34,1075 }, {  35,1075 },
 {  36,1075 }, {  37,1075 }, {  38,1075 }, {  39,1075 }, {  40,1075 },
 {  41,1075 }, {  42,1075 }, {  43,1075 }, {  44,1075 }, {  45,1075 },
 {  46,1075 }, {  47,1075 }, {  48,1075 }, {  49,1075 }, {  50,1075 },
 {  51,1075 }, {  52,1075 }, {  53,1075 }, {  54,1075 }, {  55,1075 },
 {  56,1075 }, {  57,1075 }, {  58,1075 }, {  59,1075 }, {  60,1075 },

 {  61,1075 }, {  62,1075 }, {  63,1075 }, {  64,1075 }, {  65,1075 },
 {  66,1075 }, {  67,1075 }, {  68,1075 }, {  69,1075 }, {  70,1075 },
 {  71,1075 }, {  72,1075 }, {  73,1075 }, {  74,1075 }, {  75,1075 },
 {  76,1075 }, {  77,1075 }, {  78,1075 }, {  79,1075 }, {  80,1075 },
 {  81,1075 }, {  82,1075 }, {  83,1075 }, {  84,1075 }, {  85,1075 },
 {  86,1075 }, {  87,1075 }, {  88,1075 }, {  89,1075 }, {  90,1075 },
 {  91,1075 }, {  92,1075 }, {  93,1075 }, {  94,1075 }, {  95,1075 },
 {  96,1075 }, {  97,1075 }, {  98,1075 }, {  99,1075 }, { 100,1075 },
 { 101,1075 }, { 102,1075 }, { 103,1075 }, { 104,1075 }, { 105,1075 },
 { 106,1075 }, { 107,1075 }, { 108,1075 }, { 109,1075 }, { 110,1075 },

 { 111,1075 }, { 112,1075 }, { 113,1075 }, { 114,1075 }, { 115,1075 },
 { 116,1075 }, { 117,1075 }, { 118,1075 }, { 119,1075 }, { 120,1075 },
 { 121,1075 }, { 122,1075 }, { 123,1075 }, { 124,1075 }, { 125,1075 },
 { 126,1075 }, { 127,1075 }, { 128,1075 }, {   0,  19 }, {   0,3067 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  19 },
 {   0,3056 }, {   0,   1 }, {   0,3054 }, {   0,  16 }, {   0,3052 },
 {   0,  10 }, {   0,3050 }, {   0,  11 }, {   0,3048 }, {   0,   5 },
 {   0,3046 }, {   0,   4 }, {   0,3044 }, {   0,  13 }, {   0,3042 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,1075 }, {  49,1075 }, {  50,1075 },
 {  51,1075 }, {  52,1075 }, {  53,1075 }, {  54,1075 }, {  55,1075 },
 {  56,1075 }, {  57,1075 }, {  47,1155 }, {  46,1283 }, {   0,   0 },
 {  48,1062 }, {  49,1062 }, {  50,1062 }, {  51,1062 }, {  52,1062 },
 {  53,1062 }, {  54,1062 }, {  55,1062 }, {  56,1062 }, {  57,1062 },
 {  48,1298 }, {  49,1298 }, {  50,1298 }, {  51,1298 }, {  52,1298 },
 {  53,1298 }, {  54,1298 }, {  55,1298 }, {  56,1298 }, {  57,1298 },

 {   0,   0 }, {  69,1298 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,1298 }, {  66,1298 }, {  67,1298 },
 {  68,1298 }, {  69,1298 }, {  70,1298 }, {  71,1298 }, {  72,1298 },
 {  73,1298 }, {  74,1298 }, {  75,1298 }, {  76,1298 }, {  77,1298 },
 {  78,1298 }, {  79,1298 }, {  80,1298 }, {  81,1298 }, {  82,1298 },
 {  83,1298 }, {  84,1298 }, {  85,1298 }, {  86,1298 }, {  87,1298 },
 {  88,1298 }, {  89,1298 }, {  90,1298 }, { 101,1298 }, {   0,   4 },
 {   0,2951 }, {   0,   0 }, {  95,1298 }, {   0,   0 }, {  97,1298 },
 {  98,1298 }, {  99,1298 }, { 100,1298 }, { 101,1298 }, { 102,1298 },
 { 103,1298 }, { 104,1298 }, { 105,1298 }, { 106,1298 }, { 107,1298 },

 { 108,1298 }, { 109,1298 }, { 110,1298 }, { 111,1298 }, { 112,1298 },
 { 113,1298 }, { 114,1298 }, { 115,1298 }, { 116,1298 }, { 117,1298 },
 { 118,1298 }, { 119,1298 }, { 120,1298 }, { 121,1298 }, { 122,1298 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1205 }, {  49,1205 },
 {  50,1205 }, {  51,1205 }, {  52,1205 }, {  53,1205 }, {  54,1205 },
 {  55,1205 }, {  56,1205 }, {  57,1205 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  65,1205 }, {  66,1205 }, {  67,1205 }, {  68,1205 }, {  69,1205 },
 {  70,1205 }, {  71,1205 }, {  72,1205 }, {  73,1205 }, {  74,1205 },
 {  75,1205 }, {  76,1205 }, {  77,1205 }, {  78,1205 }, {  79,1205 },
 {  80,1205 }, {  81,1205 }, {  82,1205 }, {  83,1205 }, {  84,1205 },
 {  85,1205 }, {  86,1205 }, {  87,1205 }, {  88,1205 }, {  89,1205 },
 {  90,1205 }, {   0,   4 }, {   0,2859 }, {   0,   0 }, {   0,   0 },
 {  95,1205 }, {   0,   0 }, {  97,1297 }, {  98,1205 }, {  99,1205 },
 { 100,1205 }, { 101,1205 }, { 102,1205 }, { 103,1205 }, { 104,1205 },
 { 105,1205 }, { 106,1205 }, { 107,1205 }, { 108,1205 }, { 109,1205 },
 { 110,1205 }, { 111,1205 }, { 112,1205 }, { 113,1205 }, { 114,1205 },

 { 115,1205 }, { 116,1205 }, { 117,1205 }, { 118,1205 }, { 119,1205 },
 { 120,1205 }, { 121,1205 }, { 122,1205 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,1113 }, {  49,1113 }, {  50,1113 }, {  51,1113 }, {  52,1113 },
 {  53,1113 }, {  54,1113 }, {  55,1113 }, {  56,1113 }, {  57,1113 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,1113 }, {  66,1113 }, {  67,1113 },
 {  68,1113 }, {  69,1113 }, {  70,1113 }, {  71,1113 }, {  72,1113 },

 {  73,1113 }, {  74,1113 }, {  75,1113 }, {  76,1113 }, {  77,1113 },
 {  78,1113 }, {  79,1113 }, {  80,1113 }, {  81,1113 }, {  82,1113 },
 {  83,1113 }, {  84,1113 }, {  85,1113 }, {  86,1113 }, {  87,1113 },
 {  88,1113 }, {  89,1113 }, {  90,1113 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,1113 }, {   0,   0 }, {  97,1113 },
 {  98,1113 }, {  99,1113 }, { 100,1113 }, { 101,1113 }, { 102,1113 },
 { 103,1113 }, { 104,1113 }, { 105,1113 }, { 106,1113 }, { 107,1113 },
 { 108,1113 }, { 109,1113 }, { 110,1113 }, { 111,1113 }, { 112,1113 },
 { 113,1113 }, { 114,1297 }, { 115,1113 }, { 116,1113 }, { 117,1113 },
 { 118,1113 }, { 119,1113 }, { 120,1113 }, { 121,1113 }, { 122,1113 },

 {   0,  14 }, {   0,2735 }, {   1,1297 }, {   2,1297 }, {   3,1297 },
 {   4,1297 }, {   5,1297 }, {   6,1297 }, {   7,1297 }, {   8,1297 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  14,1297 }, {  15,1297 }, {  16,1297 }, {  17,1297 }, {  18,1297 },
 {  19,1297 }, {  20,1297 }, {  21,1297 }, {  22,1297 }, {  23,1297 },
 {  24,1297 }, {  25,1297 }, {  26,1297 }, {  27,1297 }, {  28,1297 },
 {  29,1297 }, {  30,1297 }, {  31,1297 }, {   0,   0 }, {  33,1297 },
 {   0,   0 }, {  35,1297 }, {  36,1297 }, {  37,1297 }, {  38,1297 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  42,1297 }, {  43,1297 },
 {   0,   0 }, {  45,1297 }, {  46,1297 }, {  47,1297 }, {  48,1297 },

 {  49,1297 }, {  50,1297 }, {  51,1297 }, {  52,1297 }, {  53,1297 },
 {  54,1297 }, {  55,1297 }, {  56,1297 }, {  57,1297 }, {   0,   0 },
 {   0,   0 }, {  60,1297 }, {  61,1297 }, {  62,1297 }, {  63,1297 },
 {  64,1297 }, {  65,1297 }, {  66,1297 }, {  67,1297 }, {  68,1297 },
 {  69,1297 }, {  70,1297 }, {  71,1297 }, {  72,1297 }, {  73,1297 },
 {  74,1297 }, {  75,1297 }, {  76,1297 }, {  77,1297 }, {  78,1297 },
 {  79,1297 }, {  80,1297 }, {  81,1297 }, {  82,1297 }, {  83,1297 },
 {  84,1297 }, {  85,1297 }, {  86,1297 }, {  87,1297 }, {  88,1297 },
 {  89,1297 }, {  90,1297 }, {   0,   0 }, {  92,1297 }, {   0,   0 },
 {  94,1297 }, {  95,1297 }, {  96,1297 }, {  97,1297 }, {  98,1297 },

 {  99,1297 }, { 100,1297 }, { 101,1297 }, { 102,1297 }, { 103,1297 },
 { 104,1297 }, { 105,1297 }, { 106,1297 }, { 107,1297 }, { 108,1297 },
 { 109,1297 }, { 110,1297 }, { 111,1297 }, { 112,1297 }, { 113,1297 },
 { 114,1297 }, { 115,1297 }, { 116,1297 }, { 117,1297 }, { 118,1297 },
 { 119,1297 }, { 120,1297 }, { 121,1297 }, { 122,1297 }, { 123,1297 },
 { 124,1297 }, { 125,1297 }, { 126,1297 }, { 127,1297 }, { 128,1297 },
 {   0,  19 }, {   0,2605 }, {   1,1297 }, {   2,1297 }, {   3,1297 },
 {   4,1297 }, {   5,1297 }, {   6,1297 }, {   7,1297 }, {   8,1297 },
 {   9,1297 }, {   0,   0 }, {  11,1297 }, {  12,1297 }, {  13,1297 },
 {  14,1297 }, {  15,1297 }, {  16,1297 }, {  17,1297 }, {  18,1297 },

 {  19,1297 }, {  20,1297 }, {  21,1297 }, {  22,1297 }, {  23,1297 },
 {  24,1297 }, {  25,1297 }, {  26,1297 }, {  27,1297 }, {  28,1297 },
 {  29,1297 }, {  30,1297 }, {  31,1297 }, {  32,1297 }, {  33,1297 },
 {  34,-437 }, {  35,1297 }, {  36,1297 }, {  37,1297 }, {  38,1297 },
 {  39,1297 }, {  40,1297 }, {  41,1297 }, {  42,1297 }, {  43,1297 },
 {  44,1297 }, {  45,1297 }, {  46,1297 }, {  47,1297 }, {  48,1297 },
 {  49,1297 }, {  50,1297 }, {  51,1297 }, {  52,1297 }, {  53,1297 },
 {  54,1297 }, {  55,1297 }, {  56,1297 }, {  57,1297 }, {  58,1297 },
 {  59,1297 }, {  60,1297 }, {  61,1297 }, {  62,1297 }, {  63,1297 },
 {  64,1297 }, {  65,1297 }, {  66,1297 }, {  67,1297 }, {  68,1297 },

 {  69,1297 }, {  70,1297 }, {  71,1297 }, {  72,1297 }, {  73,1297 },
 {  74,1297 }, {  75,1297 }, {  76,1297 }, {  77,1297 }, {  78,1297 },
 {  79,1297 }, {  80,1297 }, {  81,1297 }, {  82,1297 }, {  83,1297 },
 {  84,1297 }, {  85,1297 }, {  86,1297 }, {  87,1297 }, {  88,1297 },
 {  89,1297 }, {  90,1297 }, {  91,1297 }, {  92,1297 }, {  93,1297 },
 {  94,1297 }, {  95,1297 }, {  96,1297 }, {  97,1297 }, {  98,1297 },
 {  99,1297 }, { 100,1297 }, { 101,1297 }, { 102,1297 }, { 103,1297 },
 { 104,1297 }, { 105,1297 }, { 106,1297 }, { 107,1297 }, { 108,1297 },
 { 109,1297 }, { 110,1297 }, { 111,1297 }, { 112,1297 }, { 113,1297 },
 { 114,1297 }, { 115,1297 }, { 116,1297 }, { 117,1297 }, { 118,1297 },

 { 119,1297 }, { 120,1297 }, { 121,1297 }, { 122,1297 }, { 123,1297 },
 { 124,1297 }, { 125,1297 }, { 126,1297 }, { 127,1297 }, { 128,1297 },
 {   0,  19 }, {   0,2475 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  43,1297 },
 {   0,   0 }, {  45,1297 }, {   0,   0 }, {   0,   0 }, {  48,1309 },
 {  49,1309 }, {  50,1309 }, {  51,1309 }, {  52,1309 }, {  53,1309 },
 {  54,1309 }, {  55,1309 }, {  56,1309 }, {  57,1309 }, {   0,  19 },
 {   0,2416 }, {   1,1341 }, {   2,1341 }, {   3,1341 }, {   4,1341 },
 {   5,1341 }, {   6,1341 }, {   7,1341 }, {   8,1341 }, {   9,1341 },
 {   0,   0 }, {  11,1341 }, {  12,1341 }, {  13,1341 }, {  14,1341 },
 {  15,1341 }, {  16,1341 }, {  17,1341 }, {  18,1341 }, {  19,1341 },
 {  20,1341 }, {  21,1341 }, {  22,1341 }, {  23,1341 }, {  24,1341 },
 {  25,1341 }, {  26,1341 }, {  27,1341 }, {  28,1341 }, {  29,1341 },

 {  30,1341 }, {  31,1341 }, {  32,1341 }, {  33,1341 }, {  34,1341 },
 {  35,1341 }, {  36,1341 }, {  37,1341 }, {  38,1341 }, {  39,1341 },
 {  40,1341 }, {  41,1341 }, {  42,1341 }, {  43,1341 }, {  44,1341 },
 {  45,1341 }, {  46,1341 }, {  47,1341 }, {  48,1341 }, {  49,1341 },
 {  50,1341 }, {  51,1341 }, {  52,1341 }, {  53,1341 }, {  54,1341 },
 {  55,1341 }, {  56,1341 }, {  57,1341 }, {  58,1341 }, {  59,1341 },
 {  60,1341 }, {  61,1341 }, {  62,1341 }, {  63,1341 }, {  64,1341 },
 {  65,1341 }, {  66,1341 }, {  67,1341 }, {  68,1341 }, {  69,1341 },
 {  70,1341 }, {  71,1341 }, {  72,1341 }, {  73,1341 }, {  74,1341 },
 {  75,1341 }, {  76,1341 }, {  77,1341 }, {  78,1341 }, {  79,1341 },

 {  80,1341 }, {  81,1341 }, {  82,1341 }, {  83,1341 }, {  84,1341 },
 {  85,1341 }, {  86,1341 }, {  87,1341 }, {  88,1341 }, {  89,1341 },
 {  90,1341 }, {  91,1341 }, {  92,1341 }, {  93,1341 }, {  94,1341 },
 {  95,1341 }, {  96,1341 }, {  97,1341 }, {  98,1341 }, {  99,1341 },
 { 100,1341 }, { 101,1341 }, { 102,1341 }, { 103,1341 }, { 104,1341 },
 { 105,1341 }, { 106,1341 }, { 107,1341 }, { 108,1341 }, { 109,1341 },
 { 110,1341 }, { 111,1341 }, { 112,1341 }, { 113,1341 }, { 114,1341 },
 { 115,1341 }, { 116,1341 }, { 117,1341 }, { 118,1341 }, { 119,1341 },
 { 120,1341 }, { 121,1341 }, { 122,1341 }, { 123,1341 }, { 124,1341 },
 { 125,1341 }, { 126,1341 }, { 127,1341 }, { 128,1341 }, {   0,  17 },

 {   0,2286 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,2252 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  44,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },

 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,-794 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },

 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },

 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   7 }, {   0,2122 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },

 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },

 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   1 }, {   0,1992 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46, 221 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },

 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 236 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   8 },
 {   0,1901 }, {   1, 956 }, {   2, 956 }, {   3, 956 }, {   4, 956 },
 {   5, 956 }, {   6, 956 }, {   7, 956 }, {   8, 956 }, {   9, 956 },
 { 101, 236 }, {  11, 956 }, {  12, 956 }, {  13, 956 }, {  14, 956 },

 {  15, 956 }, {  16, 956 }, {  17, 956 }, {  18, 956 }, {  19, 956 },
 {  20, 956 }, {  21, 956 }, {  22, 956 }, {  23, 956 }, {  24, 956 },
 {  25, 956 }, {  26, 956 }, {  27, 956 }, {  28, 956 }, {  29, 956 },
 {  30, 956 }, {  31, 956 }, {  32, 956 }, {  33, 956 }, {  34, 956 },
 {  35, 956 }, {  36, 956 }, {  37, 956 }, {  38, 956 }, {  39, 956 },
 {  40, 956 }, {  41, 956 }, {  42, 956 }, {  43, 956 }, {  44, 956 },
 {  45, 956 }, {  46, 956 }, {  47, 956 }, {  48, 956 }, {  49, 956 },
 {  50, 956 }, {  51, 956 }, {  52, 956 }, {  53, 956 }, {  54, 956 },
 {  55, 956 }, {  56, 956 }, {  57, 956 }, {  58, 956 }, {  59, 956 },
 {  60, 956 }, {  61, 956 }, {  62, 956 }, {  63, 956 }, {  64, 956 },

 {  65, 956 }, {  66, 956 }, {  67, 956 }, {  68, 956 }, {  69, 956 },
 {  70, 956 }, {  71, 956 }, {  72, 956 }, {  73, 956 }, {  74, 956 },
 {  75, 956 }, {  76, 956 }, {  77, 956 }, {  78, 956 }, {  79, 956 },
 {  80, 956 }, {  81, 956 }, {  82, 956 }, {  83, 956 }, {  84, 956 },
 {  85, 956 }, {  86, 956 }, {  87, 956 }, {  88, 956 }, {  89, 956 },
 {  90, 956 }, {  91, 956 }, {  92, 956 }, {  93, 956 }, {  94, 956 },
 {  95, 956 }, {  96, 956 }, {  97, 956 }, {  98, 956 }, {  99, 956 },
 { 100, 956 }, { 101, 956 }, { 102, 956 }, { 103, 956 }, { 104, 956 },
 { 105, 956 }, { 106, 956 }, { 107, 956 }, { 108, 956 }, { 109, 956 },
 { 110, 956 }, { 111, 956 }, { 112, 956 }, { 113, 956 }, { 114, 956 },

 { 115, 956 }, { 116, 956 }, { 117, 956 }, { 118, 956 }, { 119, 956 },
 { 120, 956 }, { 121, 956 }, { 122, 956 }, { 123, 956 }, { 124, 956 },
 { 125, 956 }, { 126, 956 }, { 127, 956 }, { 128, 956 }, {   0,   0 },
 {   0,1771 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1756 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   4 },
 {   0,1746 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 956 }, {  49, 956 },
 {  50, 956 }, {  51, 956 }, {  52, 956 }, {  53, 956 }, {  54, 956 },
 {  55, 956 }, {  56, 956 }, {  57, 956 }, {  43, 951 }, {   0,   0 },
 {  45, 951 }, {   0,   0 }, {   0,   0 }, {  48, 963 }, {  49, 963 },
 {  50, 963 }, {  51, 963 }, {  52, 963 }, {  53, 963 }, {  54, 963 },
 {  55, 963 }, {  56, 963 }, {  57, 963 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,   4 }, {   0,1654 }, {   0,   0 }, {   0,   0 },
 {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },

 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, -92 }, {  49, -92 }, {  50, -92 }, {  51, -92 }, {  52, -92 },
 {  53, -92 }, {  54, -92 }, {  55, -92 }, {  56, -92 }, {  57, -92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, -92 }, {  66, -92 }, {  67, -92 },

 {  68, -92 }, {  69, -92 }, {  70, -92 }, {  71, -92 }, {  72, -92 },
 {  73, -92 }, {  74, -92 }, {  75, -92 }, {  76, -92 }, {  77, -92 },
 {  78, -92 }, {  79, -92 }, {  80, -92 }, {  81, -92 }, {  82, -92 },
 {  83, -92 }, {  84, -92 }, {  85, -92 }, {  86, -92 }, {  87, -92 },
 {  88, -92 }, {  89, -92 }, {  90, -92 }, {   0,   4 }, {   0,1562 },
 {   0,   0 }, {   0,   0 }, {  95, -92 }, {   0,   0 }, {  97, -92 },
 {  98, -92 }, {  99, -92 }, { 100, -92 }, { 101, -92 }, { 102, -92 },
 { 103, -92 }, { 104, -92 }, { 105, -92 }, { 106, -92 }, { 107, -92 },
 { 108, 876 }, { 109, -92 }, { 110, -92 }, { 111, -92 }, { 112, -92 },
 { 113, -92 }, { 114, -92 }, { 115, -92 }, { 116, -92 }, { 117, -92 },

 { 118, -92 }, { 119, -92 }, { 120, -92 }, { 121, -92 }, { 122, -92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,-184 }, {  49,-184 }, {  50,-184 },
 {  51,-184 }, {  52,-184 }, {  53,-184 }, {  54,-184 }, {  55,-184 },
 {  56,-184 }, {  57,-184 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-184 },
 {  66,-184 }, {  67,-184 }, {  68,-184 }, {  69,-184 }, {  70,-184 },
 {  71,-184 }, {  72,-184 }, {  73,-184 }, {  74,-184 }, {  75,-184 },

 {  76,-184 }, {  77,-184 }, {  78,-184 }, {  79,-184 }, {  80,-184 },
 {  81,-184 }, {  82,-184 }, {  83,-184 }, {  84,-184 }, {  85,-184 },
 {  86,-184 }, {  87,-184 }, {  88,-184 }, {  89,-184 }, {  90,-184 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-184 },
 {   0,   0 }, {  97,-184 }, {  98,-184 }, {  99,-184 }, { 100,-184 },
 { 101,-184 }, { 102,-184 }, { 103,-184 }, { 104,-184 }, { 105,-184 },
 { 106,-184 }, { 107,-184 }, { 108,-184 }, { 109,-184 }, { 110,-184 },
 { 111,-184 }, { 112,-184 }, { 113,-184 }, { 114,-184 }, { 115,-184 },
 { 116,-184 }, { 117, 876 }, { 118,-184 }, { 119,-184 }, { 120,-184 },
 { 121,-184 }, { 122,-184 }, {   0,  14 }, {   0,1438 }, {   1,   0 },

 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {   0,   0 }, {  33,   0 }, {   0,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  42,   0 }, {  43,   0 }, {   0,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },

 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 },
 {  92,   0 }, {   0,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },

 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, {   0,   0 }, {   0,1308 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },

 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,-1734 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },

 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },

 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, {   0,   0 }, {   0,1178 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  12 },
 {   0,1166 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,  12 }, {  49,  12 }, {  50,  12 }, {  51,  12 },
 {  52,  12 }, {  53,  12 }, {  54,  12 }, {  55,  12 }, {  56,  12 },
 {  57,  12 }, {  46, 572 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 604 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1075 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, { 101, 604 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },

 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },

 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93, 572 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,   8 }, {   0, 945 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },

 {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },

 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },

 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,   1 }, {   0, 815 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0, 805 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   1 }, {   0, 793 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   4 }, {   0, 778 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  48,  12 },
 {  49,  12 }, {  50,  12 }, {  51,  12 }, {  52,  12 }, {  53,  12 },
 {  54,  12 }, {  55,  12 }, {  56,  12 }, {  57,  12 }, {   0,   0 },
 {  69,-941 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },

 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-968 }, {  49,-968 }, {  50,-968 }, {  51,-968 },
 {  52,-968 }, {  53,-968 }, {  54,-968 }, {  55,-968 }, {  56,-968 },
 {  57,-968 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 101,-941 }, {  65,-968 }, {  66,-968 },
 {  67,-968 }, {  68,-968 }, {  69,-968 }, {  70,-968 }, {  71,-968 },
 {  72,-968 }, {  73,-968 }, {  74,-968 }, {  75,-968 }, {  76,-968 },
 {  77,-968 }, {  78,-968 }, {  79,-968 }, {  80,-968 }, {  81,-968 },
 {  82,-968 }, {  83,-968 }, {  84,-968 }, {  85,-968 }, {  86,-968 },
 {  87,-968 }, {  88,-968 }, {  89,-968 }, {  90,-968 }, {   0,   4 },

 {   0, 686 }, {   0,   0 }, {   0,   0 }, {  95,-968 }, {   0,   0 },
 {  97,-968 }, {  98,-968 }, {  99,-968 }, { 100,-968 }, { 101,-968 },
 { 102,-968 }, { 103,-968 }, { 104,-968 }, { 105,-968 }, { 106,-968 },
 { 107,-968 }, { 108,-968 }, { 109,-968 }, { 110,-968 }, { 111,-968 },
 { 112,-968 }, { 113,-968 }, { 114,-968 }, { 115, 405 }, { 116,-968 },
 { 117,-968 }, { 118,-968 }, { 119,-968 }, { 120,-968 }, { 121,-968 },
 { 122,-968 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-1060 }, {  49,-1060 },

 {  50,-1060 }, {  51,-1060 }, {  52,-1060 }, {  53,-1060 }, {  54,-1060 },
 {  55,-1060 }, {  56,-1060 }, {  57,-1060 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-1060 }, {  66,-1060 }, {  67,-1060 }, {  68,-1060 }, {  69,-1060 },
 {  70,-1060 }, {  71,-1060 }, {  72,-1060 }, {  73,-1060 }, {  74,-1060 },
 {  75,-1060 }, {  76,-1060 }, {  77,-1060 }, {  78,-1060 }, {  79,-1060 },
 {  80,-1060 }, {  81,-1060 }, {  82,-1060 }, {  83,-1060 }, {  84,-1060 },
 {  85,-1060 }, {  86,-1060 }, {  87,-1060 }, {  88,-1060 }, {  89,-1060 },
 {  90,-1060 }, {   0,   0 }, {   0, 594 }, {   0,   0 }, {   0,   0 },
 {  95,-1060 }, {   0,   0 }, {  97,-1060 }, {  98,-1060 }, {  99,-1060 },

 { 100,-1060 }, { 101, 405 }, { 102,-1060 }, { 103,-1060 }, { 104,-1060 },
 { 105,-1060 }, { 106,-1060 }, { 107,-1060 }, { 108,-1060 }, { 109,-1060 },
 { 110,-1060 }, { 111,-1060 }, { 112,-1060 }, { 113,-1060 }, { 114,-1060 },
 { 115,-1060 }, { 116,-1060 }, { 117,-1060 }, { 118,-1060 }, { 119,-1060 },
 { 120,-1060 }, { 121,-1060 }, { 122,-1060 }, {   0,   0 }, {   0, 562 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, 405 }, {  49, 405 }, {  50, 405 }, {  51, 405 }, {  52, 405 },
 {  53, 405 }, {  54, 405 }, {  55, 405 }, {  56, 405 }, {  57, 405 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  43, 405 }, {   0,   0 }, {  45, 405 },
 {   0,   0 }, {   0,   0 }, {  48, 415 }, {  49, 415 }, {  50, 415 },
 {  51, 415 }, {  52, 415 }, {  53, 415 }, {  54, 415 }, {  55, 415 },
 {  56, 415 }, {  57, 415 }, {   0,  15 }, {   0, 503 }, {   1,-572 },
 {   2,-572 }, {   3,-572 }, {   4,-572 }, {   5,-572 }, {   6,-572 },
 {   7,-572 }, {   8,-572 }, {   9,-572 }, {   0,   0 }, {  11,-572 },
 {  12,-572 }, {  13,-572 }, {  14,-572 }, {  15,-572 }, {  16,-572 },

 {  17,-572 }, {  18,-572 }, {  19,-572 }, {  20,-572 }, {  21,-572 },
 {  22,-572 }, {  23,-572 }, {  24,-572 }, {  25,-572 }, {  26,-572 },
 {  27,-572 }, {  28,-572 }, {  29,-572 }, {  30,-572 }, {  31,-572 },
 {  32,-572 }, {  33,-572 }, {  34,-572 }, {  35,-572 }, {  36,-572 },
 {  37,-572 }, {  38,-572 }, {  39,-572 }, {  40,-572 }, {  41,-572 },
 {  42,-572 }, {  43,-572 }, {  44,-572 }, {  45,-572 }, {  46,-572 },
 {  47,-572 }, {  48,-572 }, {  49,-572 }, {  50,-572 }, {  51,-572 },
 {  52,-572 }, {  53,-572 }, {  54,-572 }, {  55,-572 }, {  56,-572 },
 {  57,-572 }, {  58,-572 }, {  59,-572 }, {  60,-572 }, {  61,-572 },
 {  62,-572 }, {  63,-572 }, {  64,-572 }, {  65,-572 }, {  66,-572 },

 {  67,-572 }, {  68,-572 }, {  69,-572 }, {  70,-572 }, {  71,-572 },
 {  72,-572 }, {  73,-572 }, {  74,-572 }, {  75,-572 }, {  76,-572 },
 {  77,-572 }, {  78,-572 }, {  79,-572 }, {  80,-572 }, {  81,-572 },
 {  82,-572 }, {  83,-572 }, {  84,-572 }, {  85,-572 }, {  86,-572 },
 {  87,-572 }, {  88,-572 }, {  89,-572 }, {  90,-572 }, {  91,-572 },
 {  92,-572 }, {  93,   0 }, {  94,-572 }, {  95,-572 }, {  96,-572 },
 {  97,-572 }, {  98,-572 }, {  99,-572 }, { 100,-572 }, { 101,-572 },
 { 102,-572 }, { 103,-572 }, { 104,-572 }, { 105,-572 }, { 106,-572 },
 { 107,-572 }, { 108,-572 }, { 109,-572 }, { 110,-572 }, { 111,-572 },
 { 112,-572 }, { 113,-572 }, { 114,-572 }, { 115,-572 }, { 116,-572 },

 { 117,-572 }, { 118,-572 }, { 119,-572 }, { 120,-572 }, { 121,-572 },
 { 122,-572 }, { 123,-572 }, { 124,-572 }, { 125,-572 }, { 126,-572 },
 { 127,-572 }, { 128,-572 }, {   0,   4 }, {   0, 373 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-1373 }, {  49,-1373 }, {  50,-1373 }, {  51,-1373 },
 {  52,-1373 }, {  53,-1373 }, {  54,-1373 }, {  55,-1373 }, {  56,-1373 },
 {  57,-1373 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1373 }, {  66,-1373 },
 {  67,-1373 }, {  68,-1373 }, {  69,-1373 }, {  70,-1373 }, {  71,-1373 },
 {  72,-1373 }, {  73,-1373 }, {  74,-1373 }, {  75,-1373 }, {  76,-1373 },
 {  77,-1373 }, {  78,-1373 }, {  79,-1373 }, {  80,-1373 }, {  81,-1373 },
 {  82,-1373 }, {  83,-1373 }, {  84,-1373 }, {  85,-1373 }, {  86,-1373 },

 {  87,-1373 }, {  88,-1373 }, {  89,-1373 }, {  90,-1373 }, {   0,   3 },
 {   0, 281 }, {   0,   0 }, {   0,   0 }, {  95,-1373 }, {   0,   0 },
 {  97,-1373 }, {  98,-1373 }, {  99,-1373 }, { 100,-1373 }, { 101, 243 },
 { 102,-1373 }, { 103,-1373 }, { 104,-1373 }, { 105,-1373 }, { 106,-1373 },
 { 107,-1373 }, { 108,-1373 }, { 109,-1373 }, { 110,-1373 }, { 111,-1373 },
 { 112,-1373 }, { 113,-1373 }, { 114,-1373 }, { 115,-1373 }, { 116,-1373 },
 { 117,-1373 }, { 118,-1373 }, { 119,-1373 }, { 120,-1373 }, { 121,-1373 },
 { 122,-1373 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-1465 }, {  49,-1465 },
 {  50,-1465 }, {  51,-1465 }, {  52,-1465 }, {  53,-1465 }, {  54,-1465 },
 {  55,-1465 }, {  56,-1465 }, {  57,-1465 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-1465 }, {  66,-1465 }, {  67,-1465 }, {  68,-1465 }, {  69,-1465 },
 {  70,-1465 }, {  71,-1465 }, {  72,-1465 }, {  73,-1465 }, {  74,-1465 },
 {  75,-1465 }, {  76,-1465 }, {  77,-1465 }, {  78,-1465 }, {  79,-1465 },
 {  80,-1465 }, {  81,-1465 }, {  82,-1465 }, {  83,-1465 }, {  84,-1465 },
 {  85,-1465 }, {  86,-1465 }, {  87,-1465 }, {  88,-1465 }, {  89,-1465 },
 {  90,-1465 }, {   0,  12 }, {   0, 189 }, {   0,   0 }, {   0,   0 },

 {  95,-1465 }, {   0,   0 }, {  97,-1465 }, {  98,-1465 }, {  99,-1465 },
 { 100,-1465 }, { 101,-1465 }, { 102,-1465 }, { 103,-1465 }, { 104,-1465 },
 { 105,-1465 }, { 106,-1465 }, { 107,-1465 }, { 108,-1465 }, { 109,-1465 },
 { 110,-1465 }, { 111,-1465 }, { 112,-1465 }, { 113,-1465 }, { 114,-1465 },
 { 115,-1465 }, { 116,-1465 }, { 117,-1465 }, { 118,-1465 }, { 119,-1465 },
 { 120,-1465 }, { 121,-1465 }, { 122,-1465 }, {   0,   0 }, {   0, 157 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  12 }, {   0, 147 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   2 }, {   0, 130 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  69,-373 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,  10 }, {  49,  10 }, {  50,  10 },
 {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 }, {  55,  10 },
 {  56,  10 }, {  57,  10 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, { 101,-373 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-1616 },
 {  49,-1616 }, {  50,-1616 }, {  51,-1616 }, {  52,-1616 }, {  53,-1616 },
 {  54,-1616 }, {  55,-1616 }, {  56,-1616 }, {  57,-1616 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-1616 }, {  66,-1616 }, {  67,-1616 }, {  68,-1616 },
 {  69,-1616 }, {  70,-1616 }, {  71,-1616 }, {  72,-1616 }, {  73,-1616 },
 {  74,-1616 }, {  75,-1616 }, {  76,-1616 }, {  77,-1616 }, {  78,-1616 },
 {  79,-1616 }, {  80,-1616 }, {  81,-1616 }, {  82,-1616 }, {  83,-1616 },
 {  84,-1616 }, {  85,-1616 }, {  86,-1616 }, {  87,-1616 }, {  88,-1616 },
 {  89,-1616 }, {  90,-1616 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  95,-1616 }, {   0,   0 }, {  97,-1616 }, {  98,-1616 },
 {  99,-1616 }, { 100,-1616 }, { 101,-1616 }, { 102,-1616 }, { 103,-1616 },
 { 104,-1616 }, { 105,-1616 }, { 106,-1616 }, { 107,-1616 }, { 108,-1616 },
 { 109,-1616 }, { 110,-1616 }, { 111,-1616 }, { 112,-1616 }, { 113,-1616 },
 { 114,-1616 }, { 115,-1616 }, { 116,-1616 }, { 117,-1616 }, { 118,-1616 },
 { 119,-1616 }, { 120,-1616 }, { 121,-1616 }, { 122,-1616 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 129,  21 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[5] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    &yy_transition[263],
    &yy_transition[393],


    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
// cmd: "flex -t -CF lexer.fl > lexer.cpp"
//
// Error Warning: Does not check for circular includes.

#include "dawg.h"
#include "var.h"
#include "parser.h"

#pragma warning(disable: 4127 4244)

using namespace std;
struct State
{
	int    nLine;	
	string ssFile;
} g_state;

void yyerror (char *s)
{
	cerr << "ALERT: " << s << " in " << g_state.ssFile << " at line " << g_state.nLine;
	cerr << ": \"" << yytext << "\"." << endl;
}
int yyparse (void);
bool Parse(const char* cs)
{
	FILE* stream = (cs==NULL || !strcmp(cs, "-")) ? stdin : fopen(cs, "r");
	if(stream == NULL)
		return false;
	g_state.nLine = 1;
	g_state.ssFile = (cs==NULL || !strcmp(cs, "-")) ? "stdin" : cs;
	yyin = stream;
	yyparse();
	if(cs!=NULL)
		fclose(stream);
	return true;
}

#define YY_NO_UNPUT 1
#define tree 1


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos + 1;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
	yylval.d = atof(yytext);
	return NUM;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
	yylval.b = false;
	return BOOL;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	yylval.b = true;
	return BOOL;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	strncpy(yylval.cs, yytext, 1023);
	yylval.cs[1023] = '\0';
	return ID;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	size_t t = strlen(yytext);
	yytext[t-1] = '\0';
	strncpy(yylval.cs, yytext+1, 1023);
	yylval.cs[1023] = '\0';
	return STRING;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	yylval.ch = yytext[0];
	return yytext[0];
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	yylval.ch = yytext[0];
	BEGIN(tree);
	return yytext[0];
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	yylval.ch = yytext[0];
	return yytext[0]
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	yylval.d = atof(yytext+1);
	return LENGTH;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	size_t t = strlen(yytext);
	yytext[t-1] = '\0';
	strncpy(yylval.cs, yytext+1, 1023);
	yylval.cs[1023] = '\0';
	return LABEL;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	strncpy(yylval.cs, yytext, 1023);
	yylval.cs[1023] = '\0';
	return LABEL;	
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(tree):
{
	yyterminate();
	return END;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	g_state.nLine++;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	//yylval.ch = yytext[0];
	return UNKNOWN;	
}
	YY_BREAK
case 20:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start_state_list[yy_start];

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register int yy_c = 128;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

