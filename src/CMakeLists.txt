INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

ADD_DEFINITIONS(-DHAVE_CONFIG_H
  "\"-DPACKAGE_STRING=\\\"${PROJ_NAME} ${PROJ_VERSION}\\\"\""
  "\"-DPACKAGE_BUGREPORT=\\\"${PROJ_EMAIL}\\\"\""
)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100 /wd4101 /wd4189 /wd4512 /wd4275 /wd4251 /wd4706")
  IF(USE_STATIC_LIBS)
	STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	STRING(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)

  # Use the highest warning level for visual studio.
  SET(CMAKE_CXX_WARNING_LEVEL 4)
  IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

IF(WIN32)
 SET(RES_SRCS ${RES_SRCS} dawg.rc)
ENDIF(WIN32)

IF(APPLE_BUNDLE_APP)
  SET(PROJ_MACOSX_BUNDLE MACOSX_BUNDLE)
ENDIF(APPLE_BUNDLE_APP)

SET(Boost_ADDITIONAL_VERSIONS "1.41" "1.42" "1.43" "1.44" "1.45" "1.46")
FIND_PACKAGE(Boost 1.37.0 REQUIRED COMPONENTS program_options regex)
IF(Boost_FOUND)
  ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB -DBOOST_PROGRAM_OPTIONS_NO_LIB -DBOOST_TYPEOF_SILENT)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
  IF(NOT Boost_USE_STATIC_LIBS)
    ADD_DEFINITIONS(-DBOOST_DYN_LINK -DBOOST_PROGRAM_OPTIONS_DYN_LINK)
  ENDIF(NOT Boost_USE_STATIC_LIBS)
  #SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${Boost_LIB_DIAGNOSTIC_DEFINITIONS}")
ENDIF(Boost_FOUND)

FIND_PACKAGE(GSL)
IF(GSL_FOUND)
  INCLUDE_DIRECTORIES(${GSL_INCLUDE_DIR})
  LINK_DIRECTORIES(${GSL_LINK_DIRECTORIES})
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GSL_EXE_LINKER_FLAGS}")
ENDIF(GSL_FOUND)

CHECK_INCLUDE_FILE(unistd.h  HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(process.h HAVE_PROCESS_H)
CHECK_INCLUDE_FILE(io.h HAVE_IO_H)
CHECK_INCLUDE_FILE(stdint.h  HAVE_STDINT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)

CHECK_FUNCTION_EXISTS( getpid   HAVE_GETPID)
CHECK_FUNCTION_EXISTS(_getpid   HAVE__GETPID)
CHECK_FUNCTION_EXISTS( copysign HAVE_COPYSIGN)
CHECK_FUNCTION_EXISTS(_copysign HAVE__COPYSIGN)
CHECK_FUNCTION_EXISTS( snprintf HAVE_SNPRINTF)
CHECK_FUNCTION_EXISTS(_snprintf HAVE__SNPRINTF)
CHECK_FUNCTION_EXISTS(vfprintf  HAVE_VFPRINTF)
CHECK_FUNCTION_EXISTS(_doprnt   HAVE__DOPRNT)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")

SET_SOURCE_FILES_PROPERTIES(lex.parser.cpp parser.tab.cpp PROPERTIES COMPILE_FLAGS "-I \"${CMAKE_CURRENT_SOURCE_DIR}\"")

IF(NOT HAVE_UNISTD_H)
  SET_SOURCE_FILES_PROPERTIES(lex.parser.cpp PROPERTIES COMPILE_FLAGS
  "-I \"${CMAKE_CURRENT_SOURCE_DIR}\" -I \"${CMAKE_CURRENT_SOURCE_DIR}/compat/unistd\"")
ENDIF(NOT HAVE_UNISTD_H)

SET(RANDOM_GEN_FILES  ""  CACHE STRING "Location of source files for RNG")
SET(RANDOM_GEN_HEADER "" CACHE STRING "Location of header for RNG")
SET(RANDOM_GEN_CLASS  ""  CACHE STRING "Class for RNG")
MARK_AS_ADVANCED(RANDOM_GEN_FILES RANDOM_GEN_HEADER RANDOM_GEN_CLASS)

IF(RANDOM_GEN STREQUAL mt)
  SET(RANDOM_GEN_X sfmt)
ELSEIF(RANDOM_GEN STREQUAL sfmt)
  ADD_DEFINITIONS(-DREQUIRES_SIMD)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE2")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
  ENDIF(MSVC)
  IF(CMAKE_COMPILER_IS_GNUCC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
  ENDIF(CMAKE_COMPILER_IS_GNUCC)
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -msse2")
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDIF(RANDOM_GEN STREQUAL mt)

IF(RANDOM_GEN AND NOT RANDOM_GEN_X)
  SET(RANDOM_GEN_X ${RANDOM_GEN})
ENDIF(RANDOM_GEN AND NOT RANDOM_GEN_X)

IF(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)
  SET(RANDOM_GEN_HEADER_X "<dawg/details/${RANDOM_GEN_X}.h>")
ELSE(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)
  SET(RANDOM_GEN_HEADER_X ${RANDOM_GEN_HEADER})
ENDIF(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)

IF(RANDOM_GEN_X AND NOT RANDOM_GEN_CLASS)
  SET(RANDOM_GEN_CLASS_X "dawg::details::${RANDOM_GEN_X}_mutt_gen")
ELSE(RANDOM_GEN_X AND NOT RANDOM_GEN_CLASS)
  SET(RANDOM_GEN_CLASS_X ${RANDOM_GEN_CLASS})
ENDIF(RANDOM_GEN_X AND NOT RANDOM_GEN_CLASS)

IF(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)
  SET(RANDOM_GEN_FILES_X lib/mutt/SFMT/SFMT.c)
ELSE(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)
  SET(RANDOM_GEN_FILES_X ${RANDOM_GEN_FILES})
ENDIF(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)

ADD_DEFINITIONS("-DRANDOM_GEN_HEADER=${RANDOM_GEN_HEADER_X}" "-DRANDOM_GEN_CLASS=${RANDOM_GEN_CLASS_X}")

ADD_EXECUTABLE(dawg ${PROJ_MACOSX_BUNDLE}
  dawg.cpp
  dawg.h dawg_app.h
  lib/ma.cpp lib/matic.cpp lib/output.cpp lib/mutt.cpp lib/parse.cpp
  ${RANDOM_GEN_FILES_X}
  "${CMAKE_CURRENT_BINARY_DIR}/config.h"
  ${COMPAT}
  ${RES_SRCS}
)

IF(USE_STATIC_LIBS)
  SET_TARGET_PROPERTIES(dawg PROPERTIES LINK_SEARCH_END_STATIC On)
ENDIF(USE_STATIC_LIBS)

TARGET_LINK_LIBRARIES(dawg ${CMAKE_REQUIRED_LIBRARIES})
TARGET_LINK_LIBRARIES(dawg ${Boost_LIBRARIES})
TARGET_LINK_LIBRARIES(dawg ${GSL_LIBRARIES})

IF(APPLE_BUNDLE_APP)
  SET_TARGET_PROPERTIES(dawg PROPERTIES OUTPUT_NAME ${PROJ_BUNDLE_NAME})
  SET(PROJ_INSTALL_EXTRA_ARGS BUNDLE DESTINATION "${PROJ_BUNDLE_LOCATION}")
ENDIF(APPLE_BUNDLE_APP)

INSTALL(TARGETS dawg RUNTIME DESTINATION bin ${PROJ_INSTALL_EXTRA_ARGS})

IF(UNIX)
  INSTALL(FILES dawg.desktop DESTINATION share/applications )
  INSTALL(FILES dawg.png DESTINATION share/pixmaps )
ENDIF(UNIX)

IF(APPLE_BUNDLE_APP)
  INSTALL(CODE "file(MAKE_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
  INSTALL(CODE "execute_process(COMMAND ln -s \"../MacOS/${PROJ_BUNDLE_NAME}\" dawg
                  WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
ENDIF(APPLE_BUNDLE_APP)

