INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100 /wd4101 /wd4189 /wd4512 /wd4275 /wd4251 /wd4706 /wd4610 /wd4714 /wd4510")
  IF(USE_STATIC_LIBS)
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)

  # Use the highest warning level for visual studio.
  SET(CMAKE_CXX_WARNING_LEVEL 4)
  IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

IF(WIN32)
 SET(RES_SRCS ${RES_SRCS} dawg.rc)
ENDIF(WIN32)

IF(APPLE_BUNDLE_APP)
  SET(PROJ_MACOSX_BUNDLE MACOSX_BUNDLE)
ENDIF(APPLE_BUNDLE_APP)

INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}/include")

SET(RANDOM_GEN_FILES  ""  CACHE STRING "Location of source files for RNG")
SET(RANDOM_GEN_HEADER "" CACHE STRING "Location of header for RNG")
MARK_AS_ADVANCED(RANDOM_GEN_FILES RANDOM_GEN_HEADER)

IF(RANDOM_GEN STREQUAL mt)
  SET(RANDOM_GEN_X sfmt)
ELSEIF(RANDOM_GEN STREQUAL sfmt)
  ADD_DEFINITIONS(-DREQUIRES_SIMD)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE2")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
  ENDIF(MSVC)
  IF(CMAKE_COMPILER_IS_GNUCC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
  ENDIF(CMAKE_COMPILER_IS_GNUCC)
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -msse2")
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDIF(RANDOM_GEN STREQUAL mt)

IF(RANDOM_GEN AND NOT RANDOM_GEN_X)
  SET(RANDOM_GEN_X ${RANDOM_GEN})
ENDIF(RANDOM_GEN AND NOT RANDOM_GEN_X)

IF(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)
  SET(RANDOM_GEN_HEADER_X "<dawg/details/${RANDOM_GEN_X}.h>")
ELSE(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)
  SET(RANDOM_GEN_HEADER_X ${RANDOM_GEN_HEADER})
ENDIF(RANDOM_GEN_X AND NOT RANDOM_GEN_HEADER)

IF(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)
  SET(RANDOM_GEN_FILES_X lib/mutt/SFMT/SFMT.c)
ELSE(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)
  SET(RANDOM_GEN_FILES_X ${RANDOM_GEN_FILES})
ENDIF(RANDOM_GEN_X STREQUAL "sfmt" AND NOT RANDOM_GEN_FILES)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

ADD_SUBDIRECTORY(lib)

ADD_DEFINITIONS(-DHAVE_CONFIG_H)

ADD_EXECUTABLE(dawg
  dawg.cpp
  dawg.h dawg_app.h
  "${CMAKE_CURRENT_BINARY_DIR}/config.h"
  ${COMPAT}
  ${RES_SRCS}
)

IF(USE_STATIC_LIBS)
  SET_TARGET_PROPERTIES(dawg PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dawg PROPERTIES LINK_SEARCH_START_STATIC On)
  IF(NOT MSVC)
    SET_TARGET_PROPERTIES(dawg PROPERTIES LINK_FLAGS "-static")
  ENDIF()
ENDIF(USE_STATIC_LIBS)

if(WIN32 AND NOT UNIX)
	SET(LIBDAWG_USE_STATIC_LIBS ON FORCE)
endif()

IF(LIBDAWG_USE_STATIC_LIBS)
  TARGET_LINK_LIBRARIES(dawg libdawg2-static)
ELSE(LIBDAWG_USE_STATIC_LIBS)
  TARGET_LINK_LIBRARIES(dawg libdawg2)
ENDIF(LIBDAWG_USE_STATIC_LIBS)

TARGET_LINK_LIBRARIES(dawg ${CMAKE_REQUIRED_LIBRARIES} ${Boost_LIBRARIES} )
IF(YAMLCPP_FOUND)
  TARGET_LINK_LIBRARIES(dawg YAML::YAML)
ENDIF(YAMLCPP_FOUND)

INSTALL(TARGETS dawg
	RUNTIME DESTINATION bin
	ARCHIVE DESTINATION lib
	LIBRARY DESTINATION lib
	${PROJ_INSTALL_EXTRA_ARGS})

INSTALL(DIRECTORY include/dawg
  DESTINATION include
  PATTERN "*~" EXCLUDE
)

INSTALL(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/dawg
  DESTINATION include
  PATTERN "*~" EXCLUDE
)

IF(UNIX)
#  INSTALL(FILES dawg.desktop DESTINATION share/applications )
#  INSTALL(FILES dawg.png DESTINATION share/pixmaps )
ENDIF(UNIX)


