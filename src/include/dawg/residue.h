#pragma once
#ifndef DAWG_RESIDUE_H
#define DAWG_RESIDUE_H
/****************************************************************************
 *  Copyright (C) 2009-2010 Reed A. Cartwright, PhD <reed@scit.us>          *
 ****************************************************************************/

#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>

#include <boost/cstdint.hpp>
#include <boost/bind.hpp>
#include <boost/range/sub_range.hpp>

namespace dawg {

class residue {
public:
	typedef float rate_type;
	typedef boost::uint32_t data_type;

	enum {
		base_mask      =  0x3F, // 00111111
		deleted_base   =  0x3F,
		base_bit_width =  6,
		branch_mask    = ~0x3F,
		branch_inc     =  0x40
	};

	inline data_type base() const { return _data & base_mask; }
	inline void base(data_type b) { _data = (b & base_mask) | (_data & ~base_mask); }

	inline data_type branch() const { return _data & branch_mask; }
	inline void branch(data_type u) { _data = (u & branch_mask) | (_data & ~branch_mask); }

	inline data_type length() const { return is_deleted() ? 0 : 1; }

	inline data_type data()  const { return _data; }
	inline void data(data_type d) { _data = d; }
	inline void data(data_type a, data_type d) {
		_data = (a & base_mask) | (d & branch_mask);
	}

	inline bool is_deleted() const { return (base() == deleted_base); }
	inline bool is_branch(data_type u) const { return (branch() == (u & branch_mask)); }

	inline rate_type rate_scalar() const {return _rate_scalar;}
	inline void rate_scalar(rate_type s) {
		_rate_scalar = s;
	}

	inline data_type rate_cat() const {return _rate_cat;}
	inline void rate_cat(data_type s) {
		_rate_cat = s;
	}

	residue() : _data(0), _rate_scalar(1.0) { }
	residue(data_type xbase, rate_type xscale, data_type xbranch) :
		_data((xbase & base_mask) | (xbranch & branch_mask)),
		_rate_scalar(xscale)
	{

	}

	residue(data_type xbase, data_type xscale, data_type xbranch) :
		_data((xbase & base_mask) | (xbranch & branch_mask)),
		_rate_cat(xscale)
	{

	}


protected:
	data_type  _data;
	union {
	rate_type  _rate_scalar;
	data_type  _rate_cat;
	};
};

template<class CharType, class CharTrait>
std::basic_ostream<CharType, CharTrait>&
operator<<(std::basic_ostream<CharType, CharTrait>& o, const dawg::residue &v) {
	if(!o.good()) return o;
	o << v.base();
	return o;
}

class residue_exchange {
public:
	enum { DNA = 0, RNA=2, AA=4, CODON=6, MODEND=30};

	typedef residue_exchange self_type;

	inline bool model(int a, bool lc=false, bool markins=false, bool keepempty=true, bool translate=false) {
		static const char sIns[] = "-+";
		// table for going from base->char
		static const char mods[] =
			"ACGT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // DNA
			"acgt!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // dna
			"ACGU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // RNA
			"acgu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // rna
			"ACDEFGHIKLMNPQRSTVWY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // AA
			"acdefghiklmnpqrstvwy!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // aa
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-" // Codons
			"ABCDEFGHIJKLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!!-" 
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqruvwxyz0123456789!!!-" 
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-" 
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJ_:KLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJKLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!!-"
			"ABCDEFGHIJKLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!!-"
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJ_KLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-"
			"ABCDEFGHIJ:KLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFGHIJ:KLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-"
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-"
			"ABCDEFHIJ:KLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!!-"
			"ABDEFGHIJKLNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!!!-"
		;
		// tables for going from char->base
		// 1 genetic code is 80 elements long
		static const char rmods[] = {
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1, // DNA & RNA
			63,63,63, 2,63,63,63,63,63,63,63,63,63,63,63,63, 3, 3,63,63,
			63,63,63,63,63,63,63,63,63, 0,63, 1,63,63,63, 2,63,63,63,63,
			63,63,63,63,63,63,63,63, 3, 3,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1,
			63,63,63, 2,63,63,63,63,63,63,63,63,63,63,63,63, 3, 3,63,63,
			63,63,63,63,63,63,63,63,63, 0,63, 1,63,63,63, 2,63,63,63,63,
			63,63,63,63,63,63,63,63, 3, 3,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1,
			63,63,63, 2,63,63,63,63,63,63,63,63,63,63,63,63, 3, 3,63,63,
			63,63,63,63,63,63,63,63,63, 0,63, 1,63,63,63, 2,63,63,63,63,
			63,63,63,63,63,63,63,63, 3, 3,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1,
			63,63,63, 2,63,63,63,63,63,63,63,63,63,63,63,63, 3, 3,63,63,
			63,63,63,63,63,63,63,63,63, 0,63, 1,63,63,63, 2,63,63,63,63,
			63,63,63,63,63,63,63,63, 3, 3,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1, // AA
			 2, 3, 4, 5, 6, 7,63, 8, 9,10,11,63,12,13,14,15,16,63,17,18,
			63,19,63,63,63,63,63,63,63, 0,63, 1, 2, 3, 4, 5, 6, 7,63, 8,
			 9,10,11,63,12,13,14,15,16,63,17,18,63,19,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, 0,63, 1,
			 2, 3, 4, 5, 6, 7,63, 8, 9,10,11,63,12,13,14,15,16,63,17,18,
			63,19,63,63,63,63,63,63,63, 0,63, 1, 2, 3, 4, 5, 6, 7,63, 8,
			 9,10,11,63,12,13,14,15,16,63,17,18,63,19,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63, // codons
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			51,52,53,54,55,56,57,58,59,60,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,63,12,13,14,15,16,17,18,19,20,21,
			22,23,24,63,63,63,63,63,63,25,26,27,28,29,30,31,32,33,34,35,
			36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,63,63,63,63,
			50,51,52,53,54,55,56,57,58,59,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,63,63,44,45,46,47,48,49,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			53,54,55,56,57,58,59,60,61,62,11,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,12,13,63,14,15,16,17,18,19,20,21,22,23,
			24,25,26,63,63,63,63,10,63,27,28,29,30,31,32,33,34,35,36,37,
			38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			51,52,53,54,55,56,57,58,59,60,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,63,12,13,14,15,16,17,18,19,20,21,
			22,23,24,63,63,63,63,63,63,25,26,27,28,29,30,31,32,33,34,35,
			36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,63,63,63,63,
			51,52,53,54,55,56,57,58,59,60,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,63,12,13,14,15,16,17,18,19,20,21,
			22,23,24,63,63,63,63,63,63,25,26,27,28,29,30,31,32,33,34,35,
			36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			53,54,55,56,57,58,59,60,61,62,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,11,12,13,14,15,16,17,18,19,20,21,22,23,
			24,25,26,63,63,63,63,10,63,27,28,29,30,31,32,33,34,35,36,37,
			38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,10,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,11,12,63,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,10,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,11,12,63,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
			52,53,54,55,56,57,58,59,60,61,63,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,
			23,24,25,63,63,63,63,63,63,26,27,28,29,30,31,32,33,34,35,36,
			37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,63,63,63,63,
			51,52,53,54,55,56,57,58,59,60, 9,63,63,63,63,63,63, 0, 1, 2,
			 3, 4, 5,63, 6, 7, 8,10,11,63,12,13,14,15,16,17,18,19,20,21,
			22,23,24,63,63,63,63,63,63,25,26,27,28,29,30,31,32,33,34,35,
			36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,63,63,63,63,
			50,51,52,53,54,55,56,57,58,59,63,63,63,63,63,63,63, 0, 1,63,
			 2, 3, 4, 5, 6, 7, 8, 9,10,63,11,12,13,14,15,16,17,18,19,20,
			21,22,23,63,63,63,63,63,63,24,25,26,27,28,29,30,31,32,33,34,
			35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,63,63,63,63,63
		};
		if(a >= MODEND || mods[a*64] == '!' || a < 0)
			return DAWG_ERROR("invalid genetic code.");
		_model = a;
		if(lc && _model < CODON) // use lowercase translations
			_model += 1;
		_markins = markins;
		_keepempty = keepempty;
		_translate = translate;

		// codons are complicating depending on translation tables
		// here we will base64 encode codons and translate them somewhere else
		//  FFLLSSSSYY**CCWWTTTTPPPPHHQQRRRRIIMMTTTTNNKKSSRRVVVVAAAADDEEGGGG
		// "ABCDEFGHIJ_:KLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
				
		
		cs_decode = &mods[_model*64];
		cs_ins = &sIns[(_markins ? 1 : 0)];
		cs_encode = &rmods[_model*80];
		return true;
	};
	inline bool is_same_model(int a, bool lc, bool markins, bool keepempty, bool translate) const {
		if(lc && _model < CODON)
			a += 1;
		return (a == _model && markins == _markins
			&& keepempty == _keepempty && translate == _translate);
	}
	inline bool is_keep_empty() const { return _keepempty; }

	inline residue::data_type encode(char ch) const {
		char ret = (ch >= '0') ? (cs_encode[ch - '0']) : -1;	
		return static_cast<residue::data_type>(ret);
	}
	
	inline char decode(residue::data_type r) const {
		return cs_decode[r & 63];
	}
	
	inline char decode(const residue &r) const {
		return decode(r.base());
	}
	
	inline char decode_ins() const {
		return cs_ins[0];
	}
	
	template<typename It1, typename It2>
	It2 decode_array(It1 afirst, It1 alast, It2 bfirst) const {
		for(;afirst != alast;++afirst) {
			*bfirst++ = decode(*afirst);
		}
		return bfirst;
	}
	
	template<typename It1, typename It2>
	It2 encode_array(It1 afirst, It1 alast, It2 bfirst) const {
	
		for(;afirst != alast;++afirst) {
			*bfirst++ = decode(*afirst);
		}
		return bfirst;
	}
	

	residue_exchange() { model(DNA); }

protected:
	int _model, _type;
	bool _markins, _keepempty, _translate;
	const char *cs_decode, *cs_ins, *cs_encode;
};

}
#endif

