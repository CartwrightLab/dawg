#!/usr/bin/python3

from os import sys, getopt

# import PyDawg as pd

# dawgArguments = [argument for string in sys.argv]
# print(dawgArguments)

def main(argv):
   inputfile = ''
   outputfile = ''
   try:
      opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
   except getopt.GetoptError:
      print 'test.py -i <inputfile> -o <outputfile>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print 'test.py -i <inputfile> -o <outputfile>'
         sys.exit()
      elif opt in ("-i", "--ifile"):
         inputfile = arg
      elif opt in ("-o", "--ofile"):
         outputfile = arg
   print 'Input file is "', inputfile
   print 'Output file is "', outputfile

if __name__ == '__main__':
    print("Hello DAWG, I'm a Python")
    main(sys.argv[1:])

# The original example I got working
# Must use bytes on the string from Cython -> CPP (Cython book)
# donovan = pd.PyDawg(b"../examples/basic-dna.dawg", b"fasta:-", 10, 212121)
# donovan.run()

# class Bone:
#     __init__(self, bone):
#         self.bone = bone
#
# class Walk:
#     __init__(self, walk):
#         self.walk = walk
#
# class Segments:
#     __init__(self, name, inheritsFrom, *args):
#         self.header   = header
#         self.segments = args
#
# class Trick:
#     __init__(self, name, segments):
#         self.name     = name
#         self.segments = segments
#
# class DawgBuilder:
#     __init__(self, trick, walk, bone):
#         self.trick = trick
#         self.walk  = walk
#         self.bone  = bone

# PyDawg constructor can take in Tricks, Walks, and Bones
# akita = pd.pd(
# DawgBuilder(
#     Trick(name="BasicDnaExample",
#         Segments(name="__default__", inheritsFrom="LUCA",
#             (tree_tree="((Man:0.1,Monkey:0.1):0.2,Dawg:0.25);",
#             root_length=1000, subst_model='hky',
#             subst_freqs=[0.2, 0.3, 0.3, 0.2],
#             subst_params=[0.2, 1.0], sim_reps=10))),
#     Walk(), Bone("fasta:-")))
